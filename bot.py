import os
import logging
import httpx
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext, ApplicationBuilder

from sqlalchemy import create_engine, Column, Integer, BigInteger, String, Text, DateTime, func
from sqlalchemy.orm import sessionmaker, declarative_base
from dotenv import load_dotenv
from aiocache import cached, Cache
from aiocache.serializers import JsonSerializer

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î
DATABASE_URL = os.getenv('DATABASE_URL')
engine = create_engine(DATABASE_URL)
Base = declarative_base()


class Log(Base):
    __tablename__ = 'logs'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(BigInteger, nullable=False)
    command = Column(String, nullable=False)
    timestamp = Column(DateTime(timezone=True), server_default=func.now())
    response = Column(Text)


class UserSetting(Base):
    __tablename__ = 'user_settings'
    user_id = Column(BigInteger, primary_key=True, index=True)
    city = Column(String, nullable=False)


Base.metadata.create_all(bind=engine)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

OPENWEATHERMAP_API_KEY = os.getenv('OPENWEATHERMAP_API_KEY')
WEATHER_URL = 'https://api.openweathermap.org/data/2.5/weather'


async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_first_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    help_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        "‚ÑπÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/weather <–≥–æ—Ä–æ–¥> - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.\n"
        "/weather - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –ª—é–±–∏–º–æ–º –≥–æ—Ä–æ–¥–µ.\n"
        "/setcity <–≥–æ—Ä–æ–¥> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
        "/getcity - –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—ç—à–∞ (in-memory)
@cached(ttl=600, cache=Cache.MEMORY, serializer=JsonSerializer())  # –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç
async def get_weather(city: str):
    """ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º """
    params = {
        'q': city,
        'appid': OPENWEATHERMAP_API_KEY,
        'units': 'metric',
        'lang': 'ru'
    }

    async with httpx.AsyncClient(timeout=15) as client:
        try:
            response = await client.get(WEATHER_URL, params=params)
            response.raise_for_status()
            data = response.json()
            weather = {
                '–≥–æ—Ä–æ–¥': data['name'],
                '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': data['main']['temp'],
                '–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫': data['main']['feels_like'],
                '–æ–ø–∏—Å–∞–Ω–∏–µ': data['weather'][0]['description'],
                '–≤–ª–∞–∂–Ω–æ—Å—Ç—å': data['main']['humidity'],
                '—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞': data['wind']['speed']
            }
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
            return weather
        except httpx.HTTPStatusError as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP: {e.response.status_code} - {e.response.text}")
            return None
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã: {e}")
            return None
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return None


async def weather_command(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather """
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /weather")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        setting = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω—ã: {setting.city if setting else '–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    finally:
        db.close()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ª–∏–±–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –ª–∏–±–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(context.args) == 0:
        if setting and setting.city:
            city = setting.city
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {city}")
        else:
            message = "‚ùì –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.\n–ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞"
            await update.message.reply_text(message)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥ –∏ –Ω–µ –∏–º–µ–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
            return
    else:
        city = ' '.join(context.args)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    weather = await get_weather(city)
    if weather and weather.get('–≥–æ—Ä–æ–¥'):
        message = (
            f"üå§ *–ü–æ–≥–æ–¥–∞ –≤ {weather['–≥–æ—Ä–æ–¥']}*\n"
            f"üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {weather['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']}¬∞C\n"
            f"üå° *–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫:* {weather['–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫']}¬∞C\n"
            f"‚òÅÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {weather['–æ–ø–∏—Å–∞–Ω–∏–µ'].capitalize()}\n"
            f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {weather['–≤–ª–∞–∂–Ω–æ—Å—Ç—å']}%\n"
            f"üí® *–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:* {weather['—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞']} –º/—Å\n\n"
            "üîπ *–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ BobrAi.*"
        )
    else:
        message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

    logger.info(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {message}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        log_entry = Log(
            user_id=user_id,
            command=update.message.text,
            response=message
        )
        db.add(log_entry)
        db.commit()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        db.close()


async def set_city(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setcity """
    user_id = update.effective_user.id
    if len(context.args) == 0:
        await update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.\n–ü—Ä–∏–º–µ—Ä: /setcity –ú–æ—Å–∫–≤–∞")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /setcity –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.")
        return
    city = ' '.join(context.args)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥: {city}")
    db = SessionLocal()
    try:
        setting = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()
        if setting:
            setting.city = city
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–∞: {city}")
        else:
            setting = UserSetting(user_id=user_id, city=city)
            db.add(setting)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: {city}")
        db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    finally:
        db.close()
    await update.message.reply_text(f"‚úÖ –ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {city}")


async def get_city(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getcity """
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /getcity")
    db = SessionLocal()
    try:
        setting = db.query(UserSetting).filter(UserSetting.user_id == user_id).first()
        if setting:
            message = f"üìç –í–∞—à —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {setting.city}"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {setting.city}")
        else:
            message = "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity <–≥–æ—Ä–æ–¥> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    finally:
        db.close()
    await update.message.reply_text(message)


def main():
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("weather", weather_command))
    application.add_handler(CommandHandler("setcity", set_city))
    application.add_handler(CommandHandler("getcity", get_city))

    # –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()


if __name__ == '__main__':
    main()
